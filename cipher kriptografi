{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMxgZXNEGLawAn084LmNmYP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sifa12333/AI/blob/main/cipher%20kriptografi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def caesar_encrypt(text, shift):\n",
        "  result = ''\n",
        "  for char in text:\n",
        "    if char.isalpha():\n",
        "      base = ord('A') if char.isupper() else ord('a')\n",
        "      result += chr((ord(char) - base + shift) % 26 + base)\n",
        "    else:\n",
        "      result += char\n",
        "  return result\n",
        "print(caesar_encrypt('HELLO', 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YPhTabTCyHja",
        "outputId": "178beddf-d63e-42bc-fd30-090253e83758"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KHOOR\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def vigenere_encrypt(plain, key):\n",
        "  key = key.upper()\n",
        "  result = ''\n",
        "  for i, char in enumerate(plain.upper()):\n",
        "    if char.isalpha():\n",
        "      shift = ord(key[i % len(key)]) - 65\n",
        "      result += chr((ord(char) - 65 + shift) % 26 + 65)\n",
        "    else:\n",
        "      result += char\n",
        "  return result\n",
        "print(vigenere_encrypt('ATTACKATDAWN', 'LEMON'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q0FL3V3AzdjZ",
        "outputId": "0e6135c7-6cb4-4e09-e859-d62a8e0b8c91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LXFOPVEFRNHR\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def affine_encrypt(text, a, b):\n",
        "  result = ''\n",
        "  for char in text.upper():\n",
        "    if char.isalpha():\n",
        "      result += chr(((a * (ord(char) - 65) + b) % 26) + 65)\n",
        "    else:\n",
        "      result += char\n",
        "  return result\n",
        "print(affine_encrypt('HELLO', 5, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kqct1nyezx5x",
        "outputId": "a37faffe-6bd2-4f06-d266-e127f5ebf600"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RCLLA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_table(key):\n",
        "  alphabet = 'ABCDEFGHIKLMNOPQRSTUVWXYZ'\n",
        "  table = ''\n",
        "  for c in key.upper() + alphabet:\n",
        "    if c not in table:\n",
        "      table += c\n",
        "  return [table[i:i+5] for i in range(0,25,5)]\n",
        "table = generate_table('KEYWORD')\n",
        "for row in table: print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jpvMFElt0DQI",
        "outputId": "a6cf8cf7-26ce-458c-ce85-aee926a9cc6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KEYWO\n",
            "RDABC\n",
            "FGHIL\n",
            "MNPQS\n",
            "TUVXZ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "def hill_encrypt(text, key):\n",
        "  text = text.upper().replace(' ', '')\n",
        "  n = int(len(key)**0.5)\n",
        "  key = np.array(key).reshape(n, n)\n",
        "  result = ''\n",
        "  for i in range(0, len(text), n):\n",
        "    block = [ord(c) - 65 for c in text[i:i+n]]\n",
        "    cipher = np.dot(key, block) % 26\n",
        "    result += ''.join(chr(c + 65) for c in cipher)\n",
        "  return result\n",
        "print(hill_encrypt('TEST', [3,3,2,5]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t9Oowkym0R-W",
        "outputId": "1fe7c731-3da8-4499-a49d-a7e282bbad2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RGHB\n"
          ]
        }
      ]
    }
  ]
}